name: Slang Build
description: Build Slang

inputs:
  platform:
    required: true
    default: 'windows'
    description: Platform to build on
  cmake-preset:
    required: true
    default: 'vs2022'
    description: CMake preset
  build-preset:
    default: 'releaseWithDebugInfo'
    description: CMake preset
  slang-location:
    default: 'slang'
    description: Slang source code location.
  lib-type:
    default: 'SHARED'
    description: How to build the slang library
  enable-gfx:
    default: 'TRUE'
    description: Enable gfx targets
  enable-slangc:
    default: 'TRUE'
    description: Enable standalone compiler target
  enable-slangd:
    default: 'TRUE'
    description: Enable language server target
  enable-slangi:
    default: 'TRUE'
    description: Enable Slang interpreter target
  enable-slangrt:
    default: 'TRUE'
    description: Enable runtime target
  enable-tests:
    default: 'TRUE'
    description: Enable test targets, requires SLANG_ENABLE_GFX, SLANG_ENABLE_SLANGD and SLANG_ENABLE_SLANGRT
  enable-examples:
    default: 'TRUE'
    description: Enable example targets, requires SLANG_ENABLE_GFX

runs:
  using: composite
  steps:
    - name: Cache Slang build
      id: cache-slang
      uses: actions/cache@v4
      with:
        path: ${{ inputs.slang-location }}/build
        key: slang-build-${{ runner.os }}-${{ inputs.build-preset }}-${{ hashFiles(format('{0}/CMakeLists.txt', inputs.slang-location), format('{0}/**/CMakeLists.txt', inputs.slang-location)) }}
        restore-keys: |
          slang-build-${{ runner.os }}-${{ inputs.build-preset }}-
    - name: Configure Windows CMake
      if: ${{ inputs.platform == 'windows' && steps.cache-slang.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: cmake --preset ${{ inputs.cmake-preset }} |
        -DSLANG_ENABLE_GFX=${{ inputs.enable-gfx }} |
        -DSLANG_ENABLE_SLANGD=${{ inputs.enable-slangd }} |
        -DSLANG_ENABLE_SLANGC=${{ inputs.enable-slangc }} |
        -DSLANG_ENABLE_SLANGI=${{ inputs.enable-slangi }} |
        -DSLANG_ENABLE_SLANGRT=${{ inputs.enable-slangrt }} |
        -DSLANG_ENABLE_TESTS=${{ inputs.enable-tests }} |
        -DSLANG_ENABLE_EXAMPLES=${{ inputs.enable-examples }} |
        -DSLANG_LIB_TYPE=${{ inputs.lib-type }}
      working-directory: ${{ inputs.slang-location }}
    - name: Build Windows CMake
      if: ${{ inputs.platform == 'windows' && steps.cache-slang.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: cmake --build --preset ${{ inputs.build-preset }}
      continue-on-error: true
      working-directory: ${{ inputs.slang-location }}
