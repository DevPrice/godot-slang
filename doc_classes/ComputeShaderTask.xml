<?xml version="1.0" encoding="UTF-8" ?>
<class name="ComputeShaderTask" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
		Wraps a [ComputeShaderFile] into a dispatchable unit of compute work. Functions similarly to a [ShaderMaterial], storing parameter values and sending them to the GPU during dispatch.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_shader_parameters">
			<return type="void" />
			<description>
				Clears all shader parameters for this task.
			</description>
		</method>
		<method name="dispatch">
			<return type="void" />
			<param index="0" name="kernel_name" type="StringName" />
			<param index="1" name="thread_groups" type="Vector3i" />
			<description>
				Dispatches a kernel by name with the specified number of thread groups.
			</description>
		</method>
		<method name="dispatch_all">
			<return type="void" />
			<param index="0" name="thread_groups" type="Vector3i" />
			<description>
				Dispatches all kernels associated with this task with the specified number of thread groups. Dispatch is ordered based on each kernel's index.
			</description>
		</method>
		<method name="dispatch_at">
			<return type="void" />
			<param index="0" name="kernel_index" type="int" />
			<param index="1" name="thread_groups" type="Vector3i" />
			<description>
				Dispatches a kernel by index with the specified number of thread groups.
			</description>
		</method>
		<method name="get_shader_parameter" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="param" type="StringName" />
			<description>
				Gets the shader parameter value by name.
			</description>
		</method>
		<method name="set_shader_parameter">
			<return type="void" />
			<param index="0" name="param" type="StringName" />
			<param index="1" name="value" type="Variant" />
			<description>
				Sets the shader parameter value by name.
				The exact behavior depends on the type of the parameter. For most parameters, this simply the [param value] bytes directly to the appropriate buffer.
				For example, if you declare a [code]float3[/code] parameter in your shader, You can bind it via [code]set_shader_parameter(Vector3.ONE)[/code] or [code]set_shader_parameter(Color.RED)[/code]. The value will be written to appropriate offset in the global uniform buffer.
				For parameters that map directly to a buffer or sampler, you can also bind directly to an [RID].
				[gdscript]
				var buffer_rid := RenderingServer.get_rendering_device().storage_buffer_create(256)
				compute_shader_task.set_shader_parameter("storage_buffer", buffer_rid)
				# or
				var sampler_rid := RenderingServer.get_rendering_device().sampler_create(RDSamplerState.new())
				compute_shader_task.set_shader_parameter("sampler_state", sampler_rid)
				# you can pass two RIDs in an array for Sampler2D params
				compute_shader_task.set_shader_parameter("sampler2d", [sampler_rid, texture_rid])
				[/gdscript]
				For [code]Texture2D[/code] and [code]Sampler2D[/code] parameters, you may pass a [Texture2D] resource for the [param value].
				For array types and structured buffers, you may pass in an [Array] and it will be written with the correct element stride and alignment.
				If [param value] is a [PackedByteArray], the bytes will be copied directly without any additional interpretation.
			</description>
		</method>
	</methods>
	<members>
		<member name="shader" type="ComputeShaderFile" setter="set_shader" getter="get_shader">
			The shader executed during dispatch of this task.
		</member>
	</members>
</class>
